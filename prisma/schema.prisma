generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  FREE
  PREMIUM
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

enum SupportTier {
  STANDARD
  PRIORITY
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Member {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  name      String    @unique
  email     String    @unique
  phone     String?
  password  String    @map("password")

  plan          PlanType      @default(FREE)
  planStartDate DateTime?
  planEndDate   DateTime?
  paymentStatus PaymentStatus @default(PAID)
  renewalDate   DateTime?

  timezone String? @default("America/Sao_Paulo")
  language String? @default("pt-BR")
  currency String? @default("BRL")

  supportTier SupportTier @default(STANDARD)

  RefreshToken   RefreshToken[]
  Transaction    Transaction[]
  Goal           Goal[]
  PaymentHistory PaymentHistory[]
  Notification   Notification[]

  @@index([planStartDate, planEndDate])
  @@map("members")
}

model PaymentHistory {
  id            Int           @id @unique @default(autoincrement())
  memberId      Int           @map("member_id")
  amount        Float
  paymentDate   DateTime      @map("payment_date")
  paymentMethod String?
  paymentStatus PaymentStatus

  member Member @relation(fields: [memberId], references: [id])

  @@index([paymentDate])
  @@map("payment_history")
}

model Transaction {
  id          Int             @id @unique @default(autoincrement())
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  memberId    Int             @map("member_id")
  type        TransactionType
  description String?
  category    String
  amount      Float
  date        DateTime

  member Member @relation(fields: [memberId], references: [id])

  @@index([memberId, type, date])
  @@map("transactions")
}

model Goal {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  memberId   Int      @map("member_id")
  category   String
  percentage Float

  member Member @relation(fields: [memberId], references: [id])

  @@index([memberId])
  @@map("goals")
}

model Notification {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  memberId  Int      @map("member_id")
  type      String
  message   String
  read      Boolean  @default(false)

  member Member @relation(fields: [memberId], references: [id])

  @@index([memberId, read])
  @@map("notifications")
}

model RefreshToken {
  id        Int      @id @unique @default(autoincrement())
  token     String
  expiresIn DateTime @map("expires_in")
  createdAt DateTime @default(now()) @map("created_at")
  memberId  Int      @map("member_id")

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("refresh_tokens")
}
