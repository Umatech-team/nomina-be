generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                   Int                    @id @unique @default(autoincrement())
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @updatedAt @map("updated_at")
  name                 String
  password             String
  plan                 PlanType               @default(FREE)
  timezone             String                 @default("America/Sao_Paulo")
  language             String                 @default("pt-BR")
  phone                String?
  currency             String                 @default("BRL")
  email                String                 @unique
  paymentStatus        PaymentStatus          @default(PAID) @map("payment_status")
  planEndDate          DateTime?              @map("plan_end_date")
  planStartDate        DateTime               @default(now()) @map("plan_start_date")
  renewalDate          DateTime?              @map("renewal_date")
  supportTier          SupportTier            @default(STANDARD) @map("support_tier")
  Goal                 Goal[]
  MemberMonthlySummary MemberMonthlySummary[]
  Notification         Notification[]
  PaymentHistory       PaymentHistory[]
  RefreshToken         RefreshToken[]
  Transaction          Transaction[]

  @@index([planStartDate, planEndDate])
  @@map("members")
}

model MemberMonthlySummary {
  id               Int      @id @default(autoincrement())
  memberId         Int      @map("member_id")
  totalIncome      Float    @default(0) @map("total_income")
  totalExpense     Float    @default(0) @map("total_expense")
  totalInvestments Float    @default(0) @map("total_investments")
  balance          Float    @default(0)
  month            DateTime
  member           Member   @relation(fields: [memberId], references: [id])

  @@unique([memberId, month])
  @@index([month])
  @@map("member_monthly_summary")
}

model PaymentHistory {
  id            Int           @id @unique @default(autoincrement())
  memberId      Int           @map("member_id")
  amount        Float
  paymentDate   DateTime      @map("payment_date")
  paymentMethod String        @map("payment_method")
  paymentStatus PaymentStatus @map("payment_status")
  externalId    String?       @map("external_id")
  member        Member        @relation(fields: [memberId], references: [id])

  @@index([paymentDate])
  @@map("payment_history")
}

model Transaction {
  id          Int               @id @unique @default(autoincrement())
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime?         @updatedAt @map("updated_at")
  memberId    Int               @map("member_id")
  type        TransactionType
  description String?
  category    String
  amount      Float
  date        DateTime
  currency    String
  method      TransactionMethod
  title       String
  subCategory String
  member      Member            @relation(fields: [memberId], references: [id])

  @@index([memberId, type, date])
  @@map("transactions")
}

model Goal {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  memberId            Int       @map("member_id")
  title               String
  category            String
  currentAmount       Float     @default(0) @map("current_amount")
  monthlyContribution Float     @map("montly_contribution")
  targetAmount        Float     @map("target_amount")
  member              Member    @relation(fields: [memberId], references: [id])

  @@index([memberId])
  @@map("goals")
}

model Notification {
  id        Int                  @id @unique @default(autoincrement())
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")
  memberId  Int                  @map("member_id")
  type      String
  message   String
  read      Boolean              @default(false)
  priority  NotificationPriority @default(LOW)
  member    Member               @relation(fields: [memberId], references: [id])

  @@index([memberId, read])
  @@map("notifications")
}

model RefreshToken {
  id        Int      @id @unique @default(autoincrement())
  token     String
  expiresIn DateTime @map("expires_in")
  createdAt DateTime @default(now()) @map("created_at")
  memberId  Int      @map("member_id")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum PlanType {
  FREE
  PREMIUM
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

enum SupportTier {
  STANDARD
  PRIORITY
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionMethod {
  CASH
  CARD
  PIX
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}
